      You have extensive expertise in Vue 3, Nuxt 3, TypeScript, Node.js, Capacitor.js, Ionic, Vite, Vue Router, Pinia, VueUse, Nuxt UI, and Tailwind CSS. You possess a deep knowledge of best practices and performance optimization techniques across these technologies.

      Code Style and Structure
      - Write clean, maintainable, and technically accurate TypeScript code.
      - Prioritize functional and declarative programming patterns; avoid using classes.
      - Emphasize iteration and modularization to follow DRY principles and minimize code duplication.
      - Prefer Composition API <script setup> style.
      - Use Composables to encapsulate and share reusable client-side logic or state across multiple components in your Nuxt application.

      Nuxt 3 Specifics
      - Nuxt 3 provides auto imports, so theres no need to manually import 'ref', 'useState', or 'useRouter'.
      - For color mode handling, use the built-in '@nuxtjs/color-mode' with the 'useColorMode()' function.
      - Take advantage of VueUse functions to enhance reactivity and performance (except for color mode management).
      - Use the Server API (within the server/api directory) to handle server-side operations like database interactions, authentication, or processing sensitive data that must remain confidential.
      - use useRuntimeConfig to access and manage runtime configuration variables that differ between environments and are needed both on the server and client sides.
      - For SEO use useHead and useSeoMeta.
      - For images use <NuxtImage> or <NuxtPicture> component and for Icons use Nuxt Icons module.
      - use app.config.ts for app theme configuration.

      Fetching Data
      1. Use useFetch for standard data fetching in components that benefit from SSR, caching, and reactively updating based on URL changes.
      2. Use $fetch for client-side requests within event handlers or when SSR optimization is not needed.
      3. Use useAsyncData when implementing complex data fetching logic like combining multiple API calls or custom caching and error handling.
      4. Set server: false in useFetch or useAsyncData options to fetch data only on the client side, bypassing SSR.
      5. Set lazy: true in useFetch or useAsyncData options to defer non-critical data fetching until after the initial render.

      Naming Conventions
      - Utilize composables, naming them as use<MyComposable>.
      - Use **PascalCase** for component file names (e.g., components/MyComponent.vue).
      - Favor named exports for functions to maintain consistency and readability.

      TypeScript Usage
      - Use TypeScript throughout; prefer interfaces over types for better extendability and merging.
      - Avoid enums, opting for maps for improved type safety and flexibility.
      - Use functional components with TypeScript interfaces.

      UI and Styling
      - Use Nuxt UI and Tailwind CSS for components and styling.
      - Implement responsive design with Tailwind CSS; use a mobile-first approach.

      Mobile Development with Capacitor.js/Ionic
      - Use @capacitor/core for accessing native device features and @capacitor/cli for building and managing the mobile project.
      - Implement platform-specific code using Capacitor Plugins (Camera, Geolocation, Storage, etc.) within dedicated composables.
      - Use ionic/vue components when Nuxt UI doesn't provide suitable mobile-first alternatives.
      - Follow these mobile-specific practices:
        1. Use touch-friendly UI elements with proper spacing and sizing.
        2. Implement proper keyboard handling for form inputs.
        3. Handle platform-specific behaviors (back button, deep linking, etc.).
        4. Use Capacitor's App API for lifecycle management.
        5. Implement proper splash screen and icon configurations.
      - Mobile-specific composables:
        1. Create useDevice() for device information and platform checks.
        2. Create useNative() for commonly used native features.
        3. Create usePlatform() for platform-specific logic and styling.
      - Handle offline capabilities:
        1. Implement proper data persistence using @capacitor/storage.
        2. Use @capacitor/network for network status monitoring.
        3. Implement offline-first data synchronization strategies.
      - Security considerations:
        1. Use @capacitor/preferences for secure storage of sensitive data.
        2. Implement proper SSL certificate handling.
        3. Follow platform-specific security best practices.
      - Performance optimization:
        1. Lazy load non-critical components and features.
        2. Optimize images and assets for mobile devices.
        3. Implement proper caching strategies.
        4. Use hardware acceleration for animations.


When you have made progress, I want you to update docs/development-progress.md to help the user understand what has been worked on.